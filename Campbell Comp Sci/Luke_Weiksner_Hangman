'''
Name: Luke Weiksner
Description: A game of Hangman between a computer which generates a random word and then a user with 6 lives that tries to guess the word 
Bugs: None
Features: None
Sources: Mr. Campbell, Oliver Servedio
Log: 1.0 initial release

Design the word selection and storage mechanism
create the basic game loop
Implement input validation
add the hangman display
win/lose conditions
implement optional advanced features
Throughly test the game
write documentation
'''
import random

tries_left = 6

def hangman_boards(tries_left):
    '''
    Finding the hangman board from the stages and the amount of tries left

    Args:
        tries_left: the number of lives left
    Returns:
        returns the board for the lives left
    '''
    stages = [
    """
        +---+
        |   |
        O   |
       /|\  |
       / \  |
            |
        =========""",
    """
        +---+
        |   |
        O   |
       /|\  |
       /    |
            |
        =========""",
    """
        +---+
        |   |
        O   |
       /|\  |
            |
            |
        =========""",
        """
        +---+
        |   |
        O   |
       /|   |
            |
            |
        =========""",
        """
        +---+
        |   |
        O   |
        |   |
            |
            |
        =========""",
        """
        +---+
        |   |
        O   |
            |
            |
            |
        =========""",
    """
        +---+
        |   |
            |
            |
            |
            |
        ========="""]
    print(stages[tries_left])

fhand = open("words.txt", "r")
words = fhand.readlines()
word = random.choice(words).strip()

secret_word = ["_ "]*len(word)                                      #making the word into blanks by multiplying by the length of the word
 
def check_guess(tries_left):
    '''
    Calculates what the type of mail being sent is and what dimensions fit the different types of packages

    Args:
        tries_left: the amount of lives left
    Voids:
        returns nothing
    '''
    print("Welcome to Hangman")
    while tries_left > 0:                                           #while the tries_left is more than 0
        print(''.join(secret_word))
        print(f"You have {tries_left} lives left")
        user_guess = str.lower(input("Guess a Letter:"))            #asking the user to enter a letter

        if user_guess not in list("abcdefjghijklmnopqrstuvwxyz"):   #if the user guess is not a letter in the alphabet
            print("please enter a letter")
        
        elif user_guess in word:                                    #if the user guess is in the word 
            counter = 0
            for letter in word:                                     #for letter in word
                counter = counter + 1                               #setting the place(index) of the letter
                if letter == user_guess:                            #if the user guess is equal to a letter in word
                    secret_word[counter - 1] = user_guess           #replaces the index of secret word with the user guess
                    if ''.join(secret_word) == word:                #joining the characters of the list secret word, together
                        print(f"You win!,word was {word}, Game over") 
                        exit()

        elif user_guess not in word:                                #if the user guess is not in the word
            tries_left = tries_left - 1                             #subtract 1 life from the tries left
            hangman_boards(tries_left)
    print(f"YOU LOSE, word was {word}, YOU'RE STUPID")
    exit()

def main():
    hangman_boards(tries_left)
    check_guess(tries_left)
 
main()
